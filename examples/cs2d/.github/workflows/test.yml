name: CS2D Test Suite

on:
  push:
    branches: [ main, develop, cs ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ruby-tests:
    name: Ruby Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.6'
        bundler-cache: true
        working-directory: ./config

    - name: Install dependencies
      run: |
        cd config
        bundle install --jobs 4 --retry 3

    - name: Set up test database
      run: |
        redis-cli -h localhost -p 6379 ping
      env:
        REDIS_URL: redis://localhost:6379/1

    - name: Run RuboCop
      run: |
        cd config
        bundle exec rubocop ../ --format progress

    - name: Run RSpec tests
      run: |
        cd config
        bundle exec rspec ../spec --format progress --format RspecJunitFormatter --out ../test-results/rspec.xml
      env:
        REDIS_URL: redis://localhost:6379/1
        RACK_ENV: test

    - name: Generate coverage report
      run: |
        cd config
        bundle exec rspec ../spec --format progress
      env:
        REDIS_URL: redis://localhost:6379/1
        RACK_ENV: test
        COVERAGE: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ruby-test-results
        path: test-results/

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: ruby-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build Docker images
      run: |
        cd docker
        docker-compose build

    - name: Start services
      run: |
        cd docker
        docker-compose up -d
        sleep 30 # Wait for services to start

    - name: Check service health
      run: |
        # Check Redis
        docker-compose -f docker/docker-compose.yml exec -T redis redis-cli ping
        
        # Check services are responding
        curl -f http://localhost:9292 || curl -f http://localhost:9292/health || echo "Lively app not responding"
        curl -f http://localhost:9293/game.html || echo "Static server not responding"
        curl -f http://localhost:9294/api/maps || echo "API bridge not responding"

    - name: Run Docker health tests
      run: |
        cd config
        bundle install
        bundle exec rspec ../spec/integration/docker_health_spec.rb
      env:
        REDIS_URL: redis://localhost:6379/0

    - name: Collect Docker logs
      if: failure()
      run: |
        cd docker
        docker-compose logs --tail=100 > ../test-results/docker-logs.txt

    - name: Stop services
      if: always()
      run: |
        cd docker
        docker-compose down -v

    - name: Upload Docker test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: test-results/

  playwright-tests:
    name: End-to-End Browser Tests
    runs-on: ubuntu-latest
    needs: ruby-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Set up Ruby for services
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.6'
        bundler-cache: true
        working-directory: ./config

    - name: Start Redis
      run: |
        docker run -d -p 6379:6379 redis:7-alpine
        sleep 5

    - name: Start CS2D services
      run: |
        cd docker
        docker-compose up -d
        sleep 45 # Extended wait for services to fully start
      env:
        REDIS_URL: redis://localhost:6379/0

    - name: Wait for services to be ready
      run: |
        # Wait for services with retries
        for i in {1..30}; do
          if curl -f http://localhost:9292 && curl -f http://localhost:9293/game.html && curl -f http://localhost:9294/api/maps; then
            echo "All services are ready"
            break
          fi
          echo "Waiting for services... attempt $i/30"
          sleep 2
        done

    - name: Run Playwright tests
      run: npx playwright test
      env:
        CI: true

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: test-results/
        retention-days: 30

    - name: Stop services
      if: always()
      run: |
        cd docker
        docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [ruby-tests, docker-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker services
      run: |
        cd docker
        docker-compose up -d
        sleep 30

    - name: Install Artillery
      run: npm install -g artillery@latest

    - name: Run load tests
      run: |
        # Create basic Artillery config
        cat > artillery-config.yml << EOF
        config:
          target: 'http://localhost:9292'
          phases:
            - duration: 60
              arrivalRate: 5
        scenarios:
          - name: "Lobby load test"
            requests:
              - get:
                  url: "/"
        EOF
        
        artillery run artillery-config.yml --output performance-results.json

    - name: Generate performance report
      run: |
        artillery report performance-results.json --output performance-report.html

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance-results.json
          performance-report.html

    - name: Stop services
      if: always()
      run: |
        cd docker
        docker-compose down -v

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ruby-tests, docker-tests, playwright-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ruby-tests, docker-tests, playwright-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [ruby-tests, docker-tests, playwright-tests]
    if: always()

    steps:
    - name: Notify on success
      if: needs.ruby-tests.result == 'success' && needs.docker-tests.result == 'success' && needs.playwright-tests.result == 'success'
      run: |
        echo "✅ All tests passed! CS2D is ready for deployment."

    - name: Notify on failure
      if: needs.ruby-tests.result == 'failure' || needs.docker-tests.result == 'failure' || needs.playwright-tests.result == 'failure'
      run: |
        echo "❌ Tests failed! Please check the logs and fix issues."
        exit 1