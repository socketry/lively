From 850eae0cf69e2773d32623b80003fe8cb8d95a12 Mon Sep 17 00:00:00 2001
From: Samuel Williams <samuel.williams@shopify.com>
Date: Mon, 28 Apr 2025 16:44:55 +0900
Subject: [PATCH] Vibe coded multiplayer.

---
 examples/worms/application.rb           | 408 ++++++++++++++++++------
 examples/worms/gems.locked              | 122 +++----
 examples/worms/gems.rb                  |   2 +
 examples/worms/public/_static/index.css |  24 +-
 4 files changed, 387 insertions(+), 169 deletions(-)

diff --git a/examples/worms/application.rb b/examples/worms/application.rb
index bbc57ea..0a7eb1b 100755
--- a/examples/worms/application.rb
+++ b/examples/worms/application.rb
@@ -1,88 +1,96 @@
 #!/usr/bin/env lively
 # frozen_string_literal: true
-# Released under the MIT License.
-# Copyright, 2024, by Samuel Williams.
 
-class Board
-	FRUITS = ["üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "üçà", "üçí"]
+# Released under the MIT License.
+# Copyright, 2024-2025, by Samuel Williams.
+
+require 'thread/local'
+
+class GameState
+	extend Thread::Local
 	
-	def initialize(width = 20, height = 20)
-		@width = width
-		@height = height
-		
-		reset!
+	# Initialize a new game state with a board.
+	def initialize
+		@board = Board.new
+		@game = nil
 	end
 	
-	attr :grid
+	attr :board
 	
+	# Add a new player to the game.
+	# @returns [Player] The newly created player.
+	def add_player
+		player = @board.add_player
+		Console.info(self, "Player joined", player: player)
+		
+		self.run!
+		
+		return player
+	end
+	
+	# Remove a player from the game.
+	# @parameter player [Player] The player to remove.
+	def remove_player(player)
+		@board.remove_player(player)
+		Console.info(self, "Player left", player: player)
+		
+		if @board.players.empty?
+			self.close
+		end
+	end
+	
+	# Start or resume the game loop.
+	# @parameter dt [Float] The time interval between steps in seconds.
+	def run!(dt = 0.2)
+		@game ||= Async do
+			while true
+				@board.step
+				sleep(dt)
+			end
+		end
+	end
+	
+	# Stops the game loop if it is running and sets the game instance to nil.
+	private def close
+		if game = @game
+			@game = nil
+			game.stop
+		end
+	end
+end
+
+class Player
+	attr_reader :head, :count, :color
 	attr_accessor :direction
 	
-	def add_fruit!
-		5.times do
-			y = rand(@height)
-			x = rand(@width)
-			
-			if @grid[y][x].nil?
-				@grid[y][x] = FRUITS.sample
-				return y, x
-			end
-		end
-	end
-	
-	def reset!(count = 5)
-		@grid = Array.new(@height) {Array.new(@width)}
-		@head = [@height/2, @width/2]
-		
-		@count = count
+	# Initialize a new player.
+	# @parameter board [Board] The game board.
+	# @parameter start_y [Integer] The initial y position.
+	# @parameter start_x [Integer] The initial x position.
+	# @parameter color [String] The player's color in HSL format.
+	def initialize(board, start_y, start_x, color)
+		@board = board
+		@head = [start_y, start_x]
+		@count = 1
 		@direction = :up
-		
-		@grid[@head[0]][@head[1]] = count
-		
-		add_fruit!
+		@color = color
+		@on_updated = nil
 	end
 	
-	def decrement
-		@grid.each do |row|
-			row.map! do |cell|
-				if cell.is_a?(Integer)
-					cell -= 1
-				end
-				
-				if cell == 0
-					nil
-				else
-					cell
-				end
-			end
-		end
-	end
-	
-	def direction=(value)
-		case @direction
-		when :up
-			if value == :down
-				return
-			end
-		when :down
-			if value == :up
-				return
-			end
-		when :left
-			if value == :right
-				return
-			end
-		when :right
-			if value == :left
-				return
-			end
+	# Set or get the update callback.
+	# @parameter block [Proc] Optional block to set as the callback.
+	# @returns [Proc] The current callback.
+	def on_updated(&block)
+		if block_given?
+			@on_updated = block
 		end
 		
-		@direction = value
+		return @on_updated
 	end
 	
+	# Advance the player one step in their current direction.
+	# Handles movement, collision detection, and fruit collection.
 	def step
-		decrement
-		
 		case @direction
 		when :up
 			@head[0] -= 1
@@ -94,85 +102,275 @@ class Board
 			@head[1] += 1
 		end
 		
-		if @head[0] < 0 || @head[0] >= @height || @head[1] < 0 || @head[1] >= @width
+		if @head[0] < 0 || @head[0] >= @board.height || @head[1] < 0 || @head[1] >= @board.width
 			reset!
+			return
 		end
 		
-		case @grid[@head[0]][@head[1]]
+		case @board.grid[@head[0]][@head[1]]
 		when String
 			@count += 1
-			add_fruit!
-		when Integer
+			@board.remove_fruit!(@head[0], @head[1])
+			@board.add_fruit!
+		when Integer, Hash
 			reset!
+			return
 		end
 		
-		@grid[@head[0]][@head[1]] = @count
+		@board.grid[@head[0]][@head[1]] = {count: @count, color: @color}
+		@on_updated&.call
+	end
+	
+	# Reset the player to their initial state.
+	def reset!
+		# Convert segments into fruit before resetting
+		@board.grid.each_with_index do |row, y|
+			row.each_with_index do |cell, x|
+				if cell.is_a?(Hash) && cell[:color] == @color
+					@board.convert_to_fruit!(y, x)
+				end
+			end
+		end
+		
+		@head = [@board.height/2, @board.width/2]
+		@count = 1
+		@direction = :up
 	end
 end
 
-class WormsView < Live::View
-	def initialize(...)
-		super
+class Board
+	FRUITS = ["üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "üçà", "üçí"]
+	COLOR_OFFSET = 23
+	
+	# Initialize a new game board.
+	# @parameter width [Integer] The width of the board.
+	# @parameter height [Integer] The height of the board.
+	def initialize(width = 20, height = 20)
+		@width = width
+		@height = height
+		@players = []
+		@fruit_count = 0
 		
-		@board = Board.new
+		reset!
 	end
 	
-	def run!(dt = 0.1)
-		@game ||= Async do
-			while true
-				@board&.step
-				self.update!
-				sleep(dt)
+	attr :grid, :width, :height, :players
+	
+	# Add a new player to the board.
+	# @returns [Player] The newly created player.
+	def add_player
+		hue = (@players.size * COLOR_OFFSET) % 360
+		color = "hsl(#{hue}, 100%, 50%)"
+		player = Player.new(self, @height/2, @width/2, color)
+		@players << player
+		
+		# Add a fruit when a new player joins
+		add_fruit!
+		
+		return player
+	end
+	
+	# Remove a player from the board.
+	# @parameter player [Player] The player to remove.
+	def remove_player(player)
+		@players.delete(player)
+	end
+	
+	# Add a fruit to a random empty cell.
+	# @returns [Array(Integer, Integer) | Nil] The coordinates of the added fruit, or nil if no space was found.
+	def add_fruit!
+		Console.info(self, "Adding fruit", fruit_count: @fruit_count, players: @players.size)
+		# Only add fruit if we have fewer than one per player
+		if @fruit_count < @players.size
+			5.times do
+				y = rand(@height)
+				x = rand(@width)
+				
+				if @grid[y][x].nil?
+					@grid[y][x] = FRUITS.sample
+					@fruit_count += 1
+					return y, x
+				end
+			end
+		end
+
+		validate_fruit_count!
+		
+		return nil
+	end
+	
+	# Remove a fruit from the specified coordinates.
+	# @parameter y [Integer] The y coordinate.
+	# @parameter x [Integer] The x coordinate.
+	def remove_fruit!(y, x)
+		if @grid[y][x].is_a?(String)
+			@grid[y][x] = nil
+			@fruit_count -= 1
+		end
+
+		validate_fruit_count!
+	end
+	
+	# Validate that the fruit count matches the actual number of fruits on the board.
+	# @raises [RuntimeError] If the fruit count is incorrect.
+	def validate_fruit_count!
+		actual_count = @grid.flatten.count { |cell| cell.is_a?(String) }
+		if actual_count != @fruit_count
+			raise "Fruit count mismatch: expected #{@fruit_count}, got #{actual_count}"
+		end
+	end
+	
+	# Convert a cell to fruit.
+	# @parameter y [Integer] The y coordinate.
+	# @parameter x [Integer] The x coordinate.
+	def convert_to_fruit!(y, x)
+		unless @grid[y][x].is_a?(String)
+			@grid[y][x] = FRUITS.sample
+			@fruit_count += 1
+		end
+
+		validate_fruit_count!
+	end
+	
+	# Reset the board to its initial state.
+	def reset!
+		@grid = Array.new(@height) {Array.new(@width)}
+		@players.each(&:reset!)
+		@fruit_count = 0
+		add_fruit!
+	end
+	
+	# Decrement the count of all player segments.
+	def decrement
+		@grid.each do |row|
+			row.map! do |cell|
+				if cell.is_a?(Hash)
+					cell[:count] -= 1
+					cell[:count] == 0 ? nil : cell
+				else
+					cell
+				end
 			end
 		end
 	end
 	
+	# Advance the game state by one step.
+	def step
+		decrement
+		@players.each(&:step)
+	end
+end
+
+class WormsView < Live::View
+	# Initialize a new view.
+	def initialize(...)
+		super
+		
+		@game_state = GameState.instance
+		@player = nil
+	end
+	
+	# Bind the view to a page and set up the player.
+	# @parameter page [Object] The page to bind to.
 	def bind(page)
 		super
 		
-		self.run!
+		@player = @game_state.add_player
+		@player.on_updated { self.update! }
 	end
 	
+	# Clean up resources when the view is closed.
 	def close
-		if @game
-			@game.stop
-			@game = nil
+		if @player
+			@game_state.remove_player(@player)
+			@player = nil
 		end
 		
 		super
 	end
 	
+	# Handle input events.
+	# @parameter event [Hash] The event to handle.
 	def handle(event)
 		Console.info(self, event)
 		
 		case event[:type]
 		when "keypress"
-			detail = event[:detail]
-			
-			case detail[:key]
-			when "w"
-				@board.direction = :up
-			when "s"
-				@board.direction = :down
-			when "a"
-				@board.direction = :left
-			when "d"
-				@board.direction = :right
-			end
+			handle_keypress(event[:detail])
+		when "touchend"
+			handle_swipe(event[:detail])
 		end
 	end
 	
-	def forward_keypress
-		"live.forwardEvent(#{JSON.dump(@id)}, event, {key: event.key})"
+	# Handle keyboard input.
+	# @parameter detail [Hash] The key press details.
+	private def handle_keypress(detail)
+		case detail[:key]
+		when "w"
+			@player.direction = :up
+		when "s"
+			@player.direction = :down
+		when "a"
+			@player.direction = :left
+		when "d"
+			@player.direction = :right
+		end
 	end
 	
+	# Handle swipe input.
+	# @parameter detail [Hash] The swipe details.
+	private def handle_swipe(detail)
+		@player.direction = detail[:direction].to_sym
+	end
+	
+	# Generate the JavaScript code to handle key press events.
+	# @returns [String] The JavaScript code to handle key press events.
+	private def forward_keypress
+		"live.forwardEvent(#{JSON.dump(@id)}, event, {key: event.key});"
+	end
+	
+	# Generate the JavaScript code to handle touch start events.
+	# @returns [String] The JavaScript code to handle touch start events.
+	private def forward_touchstart
+		"this.touchStart = {x: event.touches[0].clientX, y: event.touches[0].clientY};"
+	end
+	
+	# Generate the JavaScript code to handle touch end events.
+	# @returns [String] The JavaScript code to handle touch end events.
+	private def forward_touchend
+		<<~JS
+			if (this.touchStart) {
+				const dx = event.changedTouches[0].clientX - this.touchStart.x;
+				const dy = event.changedTouches[0].clientY - this.touchStart.y;
+				
+				let direction;
+				if (Math.abs(dx) > Math.abs(dy)) {
+					direction = dx > 0 ? 'right' : 'left';
+				} else {
+					direction = dy > 0 ? 'down' : 'up';
+				}
+				
+				live.forwardEvent(#{JSON.dump(@id)}, event, {direction});
+				this.touchStart = null;
+			}
+		JS
+	end
+	
+	# Render the game board.
+	# @parameter builder [Object] The builder to use for rendering.
 	def render(builder)
-		builder.tag("table", tabIndex: 0, autofocus: true, onKeyPress: forward_keypress) do
-			@board.grid.each do |row|
+		builder.tag("table", 
+			tabIndex: 0, 
+			autofocus: true, 
+			onKeyPress: forward_keypress,
+			onTouchStart: forward_touchstart,
+			onTouchEnd: forward_touchend
+		) do
+			@game_state.board.grid.each do |row|
 				builder.tag("tr") do
 					row.each do |cell|
-						if cell.is_a?(Integer)
-							style = "background-color: hsl(#{cell * 10}, 100%, 50%)"
+						if cell.is_a?(Hash)
+							style = "background-color: #{cell[:color]}"
 							builder.tag("td", style: style)
 						elsif cell.is_a?(String)
 							builder.tag("td") do
diff --git a/examples/worms/gems.locked b/examples/worms/gems.locked
index 6d0c9cd..2428dc7 100644
--- a/examples/worms/gems.locked
+++ b/examples/worms/gems.locked
@@ -1,93 +1,102 @@
 PATH
   remote: ../..
   specs:
-    lively (0.8.0)
+    lively (0.10.1)
       falcon (~> 0.47)
-      live (~> 0.9)
+      live (~> 0.17)
       xrb
 
 GEM
   remote: https://rubygems.org/
   specs:
-    async (2.11.0)
-      console (~> 1.25, >= 1.25.2)
+    async (2.23.1)
+      console (~> 1.29)
       fiber-annotation
-      io-event (~> 1.5, >= 1.5.1)
-      timers (~> 4.1)
-    async-container (0.18.2)
-      async (~> 2.10)
-    async-http (0.66.3)
+      io-event (~> 1.9)
+      metrics (~> 0.12)
+      traces (~> 0.15)
+    async-container (0.24.0)
+      async (~> 2.22)
+    async-container-supervisor (0.5.1)
+      async-container (~> 0.22)
+      async-service
+      io-endpoint
+      memory-leak (~> 0.5)
+    async-http (0.88.0)
       async (>= 2.10.2)
-      async-pool (>= 0.6.1)
-      io-endpoint (~> 0.10, >= 0.10.3)
-      io-stream (~> 0.4)
-      protocol-http (~> 0.26.0)
-      protocol-http1 (~> 0.19.0)
-      protocol-http2 (~> 0.17.0)
-      traces (>= 0.10.0)
-    async-http-cache (0.4.3)
+      async-pool (~> 0.9)
+      io-endpoint (~> 0.14)
+      io-stream (~> 0.6)
+      metrics (~> 0.12)
+      protocol-http (~> 0.49)
+      protocol-http1 (~> 0.30)
+      protocol-http2 (~> 0.22)
+      traces (~> 0.10)
+    async-http-cache (0.4.5)
       async-http (~> 0.56)
-    async-pool (0.6.1)
+    async-pool (0.10.3)
       async (>= 1.25)
-    async-service (0.12.0)
+    async-service (0.13.0)
       async
       async-container (~> 0.16)
-    async-websocket (0.26.1)
-      async-http (~> 0.54)
-      protocol-rack (~> 0.5)
-      protocol-websocket (~> 0.11)
-    console (1.25.2)
+    async-websocket (0.30.0)
+      async-http (~> 0.76)
+      protocol-http (~> 0.34)
+      protocol-rack (~> 0.7)
+      protocol-websocket (~> 0.17)
+    console (1.30.2)
       fiber-annotation
       fiber-local (~> 1.1)
       json
-    falcon (0.47.6)
+    falcon (0.51.1)
       async
-      async-container (~> 0.18)
-      async-http (~> 0.66, >= 0.66.3)
-      async-http-cache (~> 0.4.0)
+      async-container (~> 0.20)
+      async-container-supervisor (~> 0.5.0)
+      async-http (~> 0.75)
+      async-http-cache (~> 0.4)
       async-service (~> 0.10)
       bundler
       localhost (~> 1.1)
       openssl (~> 3.0)
-      process-metrics (~> 0.2.0)
-      protocol-rack (~> 0.5)
+      protocol-http (~> 0.31)
+      protocol-rack (~> 0.7)
       samovar (~> 2.3)
     fiber-annotation (0.2.0)
     fiber-local (1.1.0)
       fiber-storage
-    fiber-storage (0.1.0)
-    io-endpoint (0.10.3)
-    io-event (1.5.1)
-    io-stream (0.4.0)
-    json (2.7.2)
-    live (0.11.0)
-      async-websocket (~> 0.23)
-      xrb
-    localhost (1.3.1)
-    mapping (1.1.1)
-    openssl (3.2.0)
-    process-metrics (0.2.1)
-      console (~> 1.8)
-      samovar (~> 2.1)
-    protocol-hpack (1.4.3)
-    protocol-http (0.26.5)
-    protocol-http1 (0.19.1)
+    fiber-storage (1.0.1)
+    io-endpoint (0.15.2)
+    io-event (1.10.0)
+    io-stream (0.6.1)
+    json (2.11.3)
+    live (0.17.0)
+      async-websocket (~> 0.27)
+      protocol-websocket (~> 0.19)
+      xrb (~> 0.10)
+    localhost (1.5.0)
+    mapping (1.1.3)
+    memory-leak (0.5.2)
+    metrics (0.12.2)
+    openssl (3.3.0)
+    protocol-hpack (1.5.1)
+    protocol-http (0.49.0)
+    protocol-http1 (0.34.0)
       protocol-http (~> 0.22)
-    protocol-http2 (0.17.0)
+    protocol-http2 (0.22.1)
       protocol-hpack (~> 1.4)
-      protocol-http (~> 0.18)
-    protocol-rack (0.5.1)
-      protocol-http (~> 0.23)
+      protocol-http (~> 0.47)
+    protocol-rack (0.11.2)
+      protocol-http (~> 0.43)
       rack (>= 1.0)
-    protocol-websocket (0.12.1)
+    protocol-websocket (0.20.2)
       protocol-http (~> 0.2)
-    rack (3.0.11)
+    rack (3.1.13)
     samovar (2.3.0)
       console (~> 1.0)
       mapping (~> 1.0)
-    timers (4.3.5)
-    traces (0.11.1)
-    xrb (0.6.1)
+    thread-local (1.1.0)
+    traces (0.15.2)
+    xrb (0.11.1)
 
 PLATFORMS
   arm64-darwin-23
@@ -96,6 +105,7 @@ PLATFORMS
 DEPENDENCIES
   live
   lively!
+  thread-local
 
 BUNDLED WITH
    2.5.5
diff --git a/examples/worms/gems.rb b/examples/worms/gems.rb
index 2b92b17..6b8e6a7 100644
--- a/examples/worms/gems.rb
+++ b/examples/worms/gems.rb
@@ -6,3 +6,5 @@ source "https://rubygems.org"
 
 gem "live"
 gem "lively", path: "../../"
+
+gem "thread-local"
diff --git a/examples/worms/public/_static/index.css b/examples/worms/public/_static/index.css
index cf2da27..8c3ffe4 100644
--- a/examples/worms/public/_static/index.css
+++ b/examples/worms/public/_static/index.css
@@ -1,5 +1,4 @@
 /* Center the table in the page */
-
 body {
 	display: flex;
 	justify-content: center;
@@ -8,21 +7,30 @@ body {
 	margin: 0;
 }
 
-/* Make a table display as a regular size 10px x 10px per cell */
-
+/* Table styling */
 table {
-	border-collapse: collapse;
+	table-layout: fixed;
 	border-spacing: 0;
+
+	border-collapse: collapse;
+
+	width: 100vmin;
+	height: 100vmin;
 }
 
+/* Cell styling */
 td {
-	width: 2rem;
-	height: 2rem;
+	width: 4vmin;
+	height: 4vmin;
+
 	padding: 0;
 	margin: 0;
-	border: 1px solid black;
 	
-	/* Center the character in the cell */
+	/* Center the content in the cell */
 	text-align: center;
 	vertical-align: middle;
+	
+	/* Scale the font size with the viewport */
+	font-size: 3vmin;
+	line-height: 1;
 }
\ No newline at end of file
-- 
2.49.0

